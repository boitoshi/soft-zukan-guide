<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🎮 ポケモン図鑑マスター - 全ソフト対応版</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>    <!-- Vue Composables -->
    <script src="composables/useGameData.js"></script>
    <script src="composables/usePokemonFilter.js"></script>
    <script src="composables/useLocalStorage.js"></script>
    
    <!-- Vue Components -->
    <script src="components/AppNavigation.js"></script>
    <script src="components/StatsPanel.js"></script>
    <script src="components/PokemonCard.js"></script>
    <script src="components/FilterPanel.js"></script>
    <script src="components/GameSelector.js"></script>
    <style>
        body { 
            font-family: 'Hiragino Kaku Gothic Pro', 'ヒラギノ角ゴ Pro W3', Meiryo, メイリオ, Osaka, 'MS PGothic', arial, helvetica, sans-serif; 
        }
        
        /* カスタムアニメーション */
        .fade-enter-active, .fade-leave-active {
            transition: opacity 0.3s ease;
        }
        .fade-enter-from, .fade-leave-to {
            opacity: 0;
        }

        .slide-down-enter-active, .slide-down-leave-active {
            transition: all 0.3s ease;
        }
        .slide-down-enter-from, .slide-down-leave-to {
            opacity: 0;
            transform: translateY(-10px);
        }

        /* カスタムスクロールバー */
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        /* ホバーエフェクト */
        .pokemon-card {
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .pokemon-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        /* ゲーム選択カード */
        .game-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .game-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
        }
        .game-card.selected {
            box-shadow: 0 0 0 4px rgb(168 85 247 / 0.5);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 min-h-screen">
    <div id="app" class="container mx-auto px-4 py-8">
        <!-- ナビゲーションヘッダー -->
        <AppNavigation current-page="index" />

        <!-- ヘッダー -->
        <div class="text-center mb-8">
            <h1 class="text-5xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4">
                🎮 ポケモン図鑑マスター
            </h1>
            <p class="text-xl text-gray-600 mb-2">全ソフト対応版 - Ultimate Edition</p>
            <div v-if="selectedGame" class="flex justify-center gap-4 text-sm text-gray-500">
                <span>{{ selectedGame.game }}: {{ zukanData.stats?.total || 0 }}匹</span>
                <span>•</span>
                <span>重複なし: {{ uniquePokemonCount }}匹</span>
            </div>
        </div>

        <!-- ゲーム選択 -->        <GameSelector 
            :available-games="availableGames"
            :selected-game="selectedGame"
            :show-back-button="true"
            @game-selected="selectGame"
            @back-to-selection="backToGameSelection"
        />

        <!-- メイン図鑑アプリ（ゲーム選択後） -->
        <div v-if="selectedGame">

            <!-- 統計ダッシュボード -->
            <StatsPanel 
                :stats="zukanData.stats" 
                :caught-count="caughtCount"
                :total-count="zukanData.stats?.total || 0"
                :progress-percent="progressPercent" />

            <!-- フィルターエリア -->                <FilterPanel 
                    :selected-game="selectedGame"
                    :version-filters="zukanData.version_filters"
                    v-model="filters"
                    @reset-filters="resetFilters"
                />

            <!-- 統計サマリー -->
            <transition name="slide-down">
                <div v-if="filteredPokemon.length > 0" class="bg-gradient-to-r from-purple-100 to-blue-100 rounded-2xl p-4 mb-6">
                    <div class="text-center">
                        <span class="text-lg font-semibold text-purple-800">
                            {{ filteredPokemon.length }}匹のポケモンが見つかりました
                        </span>
                        <span v-if="filters.region === 'duplicates'" class="text-sm text-purple-600 ml-2">
                            (複数の図鑑に登録されているポケモン)
                        </span>
                    </div>
                </div>
            </transition>

            <!-- ポケモンリスト -->
            <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
                <div class="p-6 border-b bg-gradient-to-r from-purple-50 to-blue-50">
                    <h2 class="text-2xl font-bold flex items-center">
                        <span class="text-2xl mr-2">📋</span>
                        ポケモンリスト
                    </h2>
                    <p class="text-gray-600 mt-1">ポケモンをクリックしてゲット状況を更新 ⚡</p>
                </div>
                
                <div class="max-h-96 overflow-y-auto custom-scrollbar">
                    <transition-group name="fade" tag="div">                        <PokemonCard 
                            v-for="pokemon in filteredPokemon" 
                            :key="pokemon.id"
                            :pokemon="pokemon"
                            :selected-game="selectedGame"
                            @toggle-caught="toggleCaught"
                        />
                    </transition-group>
                </div>
            </div>

            <!-- 重複分析セクション -->
            <div class="mt-8 bg-white rounded-2xl shadow-lg p-6">
                <h2 class="text-2xl font-bold mb-6 flex items-center">
                    <span class="text-2xl mr-2">📊</span>
                    図鑑分析レポート
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="text-center p-6 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl">
                        <div class="text-3xl font-bold text-blue-600 mb-2">{{ zukanData.stats?.duplicates || 0 }}</div>
                        <div class="text-sm text-blue-800">🔄 重複ポケモン</div>
                        <div class="text-xs text-blue-600 mt-1">複数図鑑に登録</div>
                    </div>
                    <div v-for="region in selectedGame.regions" :key="region.id"
                         class="text-center p-6 bg-gradient-to-br from-green-50 to-green-100 rounded-xl">
                        <div class="text-3xl font-bold text-green-600 mb-2">
                            {{ zukanData.stats?.regions?.[region.id]?.only || 0 }}
                        </div>
                        <div class="text-sm text-green-800">{{ region.name }}専用</div>
                        <div class="text-xs text-green-600 mt-1">
                            合計: {{ zukanData.stats?.regions?.[region.id]?.total || 0 }}匹
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- フッター -->
        <div class="mt-8 text-center text-gray-500 text-sm">
            <p>🎮 ポケモン図鑑マスター v3.0 Ultimate | ✨ Vue.js で作成</p>
            <p class="mt-1">データは自動保存されます 💾 | 全ソフト対応版</p>
        </div>
    </div>    <script>
        const { createApp, onMounted, ref, computed, watch } = Vue;

        createApp({
            components: {
                AppNavigation,
                StatsPanel,
                PokemonCard,
                FilterPanel,
                GameSelector
            },
            setup() {
                // Composition API を使用
                const gameData = useGameData();
                const localStorage = useLocalStorage();
                const pokemonFilter = usePokemonFilter(gameData.zukanData, gameData.selectedGame);

                // ゲーム選択の処理
                const selectGame = async (gameId) => {
                    await gameData.selectGame(gameId, localStorage);
                };

                // ゲーム選択画面に戻る処理
                const backToGameSelection = () => {
                    gameData.backToGameSelection(localStorage);
                };

                // ポケモンのゲット状況切り替え処理
                const toggleCaught = (pokemonId) => {
                    gameData.toggleCaught(pokemonId, localStorage);
                };

                // ライフサイクル
                onMounted(async () => {
                    await gameData.loadAvailableGames();
                    
                    // 前回選択したゲームを復元
                    const savedGame = localStorage.loadSelectedGame();
                    if (savedGame && gameData.availableGames.value.find(g => g.id === savedGame)) {
                        await selectGame(savedGame);
                    }
                });

                return {
                    // gameData composable のプロパティ
                    zukanData: gameData.zukanData,
                    availableGames: gameData.availableGames,
                    selectedGame: gameData.selectedGame,
                    caughtCount: gameData.caughtCount,
                    remainingCount: gameData.remainingCount,
                    progressPercent: gameData.progressPercent,
                    uniquePokemonCount: gameData.uniquePokemonCount,
                    getGameIcon: gameData.getGameIcon,
                    
                    // pokemonFilter composable のプロパティ
                    filters: pokemonFilter.filters,
                    filteredPokemon: pokemonFilter.filteredPokemon,
                    resetFilters: pokemonFilter.resetFilters,
                    getRegionName: pokemonFilter.getRegionName,
                    getRegionClass: pokemonFilter.getRegionClass,
                    
                    // イベントハンドラー
                    selectGame,
                    backToGameSelection,
                    toggleCaught
                };
            }
        }).mount('#app');
    </script>
</body>
</html>
